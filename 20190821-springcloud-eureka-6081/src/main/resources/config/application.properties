server.port=6081
server.servlet.context-path=/

# 配置eureka
# 配置eureka的服务名(hostname)
eureka.instance.hostname=eureka01
# 如果eureka不配置，连自己也会被注册进服务中心
# 一般情况下注册进服务中心的都是服务的提供者(provider)，不需要把consumer和eureka自己注册服务中心
eureka.client.register-with-eureka=false
# 配置不在注册中心中查找eureka信息
eureka.client.fetch-registry=false
# 配置eureka的注册地址
# 在eureka的注册地址中，是可以分空间(workspace)的，根据空间的不同来配置不同集群的eureka来实现不同的作用
# workspace可以随意起(一般情况下，是根据注册进eureka服务中心的服务来进行定制的)
# order项目-->服务提供者,服务消费者
# cart项目-->服务提供者,服务消费者
# item项目-->服务提供者,服务消费者
# manager项目-->服务提供者,服务消费者(内网)
# 为了提高安全性和维护性(不方便按类别维护)
# 2019-08-22 10:47:38.742  INFO 5800 --- [a-EvictionTimer] c.n.e.registry.AbstractInstanceRegistry  : Running the evict task with compensationTime 0ms
# 是要获取注册中心的所有服务的心跳，默认为30s,60s,90s,120s(自己手动配置)
# eureka会根据注册中心中的服务的数量来进行选择心跳时间(也可以手动配置)
eureka.client.service-url.defaultZone=http://eureka02:6082/eureka,http://eureka03:6083/eureka
# 当eureka开始配置集群的时候，就必须要声明zone
# 如果不声明，则每一台eureka是单独平等存在，并不会去加载同一个命名空间，只会自己开辟自己的，在自己开辟的命名空间中找不到其他的集群，则就会认为自己是单节点(平等机制)
# defaultZone：是系统默认开辟的，可以直接使用，如果不需要使用系统开辟的，需要自己声明(如何声明eureka集群的命名空间？)
# 关闭eureka的自我保护机制
# 是否能够检测到服务的心跳，也不再进行剔除，自我保护机制失效
#eureka.server.enable-self-preservation=false
# 配置eureka服务中心检测心跳的时间(单位是毫秒数)
# eureka自己检测服务的心跳时间
#eureka.server.eviction-interval-timer-in-ms=10000